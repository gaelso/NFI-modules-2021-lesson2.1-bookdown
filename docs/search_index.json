[["index.html", "NFI eLearning Practice Simulation Cover page", " NFI eLearning Practice Simulation Lesson 2: Simple sampling for carbon Part 1: Sampling design Handbook with solutions - Version 1.0 - October 2021 Cover page DRAFT         NFI eLearning Practice Simulation Lesson 2: Simple sampling for carbon Part 1: Sampling design   ADD Authors FAO, Göttingen   ADD Recommended citation Authors, Interactive training modules on National Forest Inventory data analysis - handbook with solutions, Food and Agricultural Organization of the United Nations, Rome.   ADD Disclaimer   ADD license Recommendation: CC NC SA 4 for the book, MIT for the code, Underlying data © FAO, 2021.   ADD Photo credit "],["introduction.html", "Introduction", " Introduction DRAFT Welcome to the second lesson of the National Forest Inventory eLearning practice simulation module. This interactive module is designed to complement the National Forest Inventory eLearning Modules with practical hands-on exercises on a fictional island that just emerged in the middle of the Atlantic Ocean: Louland. The lesson 2 focuses on several sampling methods that we called simple sampling as they are based on the simple random sampling statistics. As we have seen in the NFI eLearning Modules, NFI are multi-purposes but the sampling design requires that we focus on one main variable of interest. In this lesson 2, the main variable of interest is the forest mean aboveground biomass of Louland. So for this lesson2, we will limit ourselves to random, systematic and uneven systematic sampling, and we will obtain aboveground biomass estimates for each forest type through post-stratification. If you have not completed the lesson 1: Overview of the preliminary data, we encourage you to start there. Lesson 1 provides a small overview of Louland and introduces how you will interact with R consoles embedded in this document. The lesson 2 is divided in two parts: Sampling design Data analysis We will now start the part 1. We will develop a sampling design for estimating the mean carbon stock in ton/ha of Loulands forests. The objectives of the part 1 are: Estimate a number of random samples based on a precision/cost trade-off (cost being simplified to the number of plots that we can afford for now), Find a sampling grid size for a systematic sampling closest to the estimated number of samples. Create a simple random sampling and an uneven systematic sampling with the same number of plots. Compare the distribution of plots per forest category for these three type of simple sampling designs. Please note that nowadays many countries do not use these sampling design methods due to several inconveniences. These designs are often not optimal as different sub-populations have different variability and taking it into consideration allows for more optimal designs (See module 3 on Sampling for more information). However, since the maths for the estimations resulting from these sampling methods are fairly simple, they constitute a good entry point to sampling and we will start from there. More advanced sampling design methods for NFI, i.e stratified and ratio estimators are the focus of other interactive lessons. Lets get started! "],["1-size.html", "1 Sampling size", " 1 Sampling size DRAFT Remember in the NFI module lesson 3, the formula to estimate the sampling size n, based on Simple Random Sample (SRS), is: \\[n = \\left(\\frac{CV \\cdot t^{1 - \\alpha/2}_{n-1}}{A}\\right)^2 \\sim \\left(\\frac{CV \\cdot 1.96}{A}\\right)^2\\] with: \\(CV = s / \\overline{y} \\times 100\\) the NFI main variable coefficient of variation expressed as percentage, \\(s\\) and \\(\\overline{y}\\) the samples main variables standard deviation and average respectively, \\(A\\) the desired precision in percentage, and \\(t^{1 - \\alpha/2}_{n-1}\\) the Students t-value with \\(n-1\\) degrees of freedom and \\(1-\\frac{\\alpha}{2}\\) confidence level where \\(\\alpha\\) is the significance level. This value is approximated by the value 1.96 when assuming an infinite sample and 0.95 confidence level.   Thanks to the results of the preliminary forest inventory (exfi_agb), we have an estimate of \\(\\overline{y}\\) and \\(s\\) for a forest stand in Louland. While this stand is most likely not representative of the whole island, we can use it to make an estimate of the number of samples necessary to achieve various target precision values. The final number of plots will depend on the desired precision and your budget constraints. In case of a systematic sampling we can add an additional constraint that we want the NFI grid to be a round km value. Lets first calculate the number of sample for different precision levels. For a 5% precision, the number of sample is: n05 &lt;- ((exfi_agb$sd_agb / exfi_agb$mean_agb * 100) * 1.96 / 5)^2 n05 [1] 957.7559   Your turn, calculate n10, n15 and n20, the number of samples necessary to get respectively 10%, 15% and 20% precision on Loulands mean aboveground biomass. Calculations for 10% here: ## Console n10 &lt;- ((exfi_agb$sd_agb / exfi_agb$mean_agb) * ___ / ___)^2 n10 ## Solution n10 &lt;- ((exfi_agb$sd_agb / exfi_agb$mean_agb * 100) * 1.96 / 10)^2 n10 [1] 239.439   Calculations for 15% here: ## Console n15 &lt;- ((___ / ___) * ___ / ___)^2 n15 ## Solution n15 &lt;- ((exfi_agb$sd_agb / exfi_agb$mean_agb * 100) * 1.96 / 15)^2 n15 [1] 106.4173   Calculations for 20% here: ## Console ## ## Solution n20 &lt;- ((exfi_agb$sd_agb / exfi_agb$mean_agb * 100) * 1.96 / 20)^2 n20 [1] 59.85975   Well done! We have enough budget for around 300 plots. What precision can we afford? Multiple choices 5% 10% 15% 20%   "],["2-sysdemo.html", "2 Systematic sampling: demo Create grid points Visualize Calculate the number of plot per land cover class", " 2 Systematic sampling: demo DRAFT Now lets see what sampling grid spacing is the closest to a sampling size of 239 plots. We will start with systematic sampling to account for the additional constraint on grid spacing, and afterwards we will make a simple random sampling that matches the same number of plots. To practice R code we will process by try and error. We will start with a rather large grid spacing, based on a simple cross-multiplication and then reproduce the code for smaller grids until we reach a number of plots close to our budget constraint and an expected precision of 10%. The new land fits more or less in a 90 x 90 km square, meaning that if we were to place a sampling plot at the center of each square of a 1 km grid we would have 90 * 90 = 8100 sampling plots. Similarly a 4 km grid would give us approximately (90 / 5)^2 = 324 plots. This is close to the number of plots for 10% precision on AGB so we will start there. The sf package contains the function st_make_grid() to create random and grid points within an existing polygon. Lets make the grid. We have the sf_admin shapefile that contains the administrative boundary of Louland and can be used as a canvas for the grid. We will also offset the grid starting point 1 km South and 1 km West of the land most Southern and Western point to avoid having too many plots at the edge of the land. This is a precaution specific for this exercise, as Louland shape is close to a square, and may not be needed in a real country! The offset is calculated based on the land cover shapefile bounding box calculated with st_bbox(). offset &lt;- st_bbox(sf_lc)[c(&quot;xmin&quot;, &quot;ymin&quot;)] + c(-1000, -1000)   Create grid points To make the grid we use the option what = \"polygon\" sf_grid5 &lt;- st_make_grid(sf_lc, cellsize = c(5000, 5000), what = &quot;polygons&quot;, offset = offset) %&gt;% st_intersection(sf_admin) %&gt;% st_as_sf()  And to make points we change the option to what = \"center\" (replace \"center\" with \"corner\" to have the points at the grid intersections). We use st_intersection() to reduce the grid to our country boundaries and the function st_as_sf() converts the result of the intersection to an sf object. sf_points5 &lt;- st_make_grid(sf_lc, cellsize = c(5000, 5000), what = &quot;centers&quot;, offset = offset) %&gt;% st_intersection(sf_admin) %&gt;% st_as_sf()   After that, we overlap the point grid with the land cover layer with st_join() to assign land cover to each plot. We like to order our land cover code lc to appear in a certain order in maps. To follow the order of the land cover numerical ID lc_id we use the function fct_reorder from the tidyverse package forcats. sf_plot5 &lt;- sf_points5 %&gt;% st_join(sf_lc) %&gt;% mutate(lc = fct_reorder(lc, lc_id)) %&gt;% filter(!is.na(lc))   Visualize We can visualize the grid with the following code based on the ggplot2 package and its geom_sf() function to display sf objects. we have a custom color palette pal for Louland land covers. ggplot() + geom_sf(data = sf_lc, aes(fill = lc), color = NA) + geom_sf(data = sf_plot5, aes(fill = lc), shape = 21) + geom_sf(data = sf_grid5, fill = NA, col = &quot;red&quot;, size = 0.6) + geom_sf(data = sf_admin, fill= NA) + scale_fill_manual(values = pal) + labs(fill = &quot;&quot;, color = &quot;&quot;) + theme_void() Its looking good!   Calculate the number of plot per land cover class To calculate the number of plot in each forest type and the total we can use group_by() and summarise() again, and we first convert our sf object to a tibble to get rid of the spatial information. nplot5 &lt;- sf_plot5 %&gt;% as_tibble() %&gt;% group_by(lc) %&gt;% summarise(n = n()) nplot5 # A tibble: 7 x 2 lc n &lt;fct&gt; &lt;int&gt; 1 WA 1 2 NF 68 3 WL 53 4 DD 32 5 MD 78 6 EV 32 7 MG 5 Finally, we need to remove non-forest categories with filter() and sum up the remaining number of plots. nplot5_total &lt;- nplot5 %&gt;% filter(!(lc %in% c(&quot;WA&quot;, &quot;NF&quot;))) %&gt;% summarise(n = sum(n)) nplot5_total # A tibble: 1 x 1 n &lt;int&gt; 1 200   While we can afford this sampling size, its expected precision is closer to 15% than our target 10%. We can try to intensify a bit to increase our precision. In our very first approximation we didnt account for the fact that a good proportion of the land is non-forest. In the next session you will prepare grids of 4 and 3 km width and calculate the number of forested plots.   "],["3-sys4.html", "3 Systematic sampling: 4 x 4 km grid Create the grid points Visualize Calculate the number of plot per land cover class", " 3 Systematic sampling: 4 x 4 km grid DRAFT This whole session is composed of guided exercises to reproduce the demo but this time with a 4 x 4 km grid. You turn! Prepare sf_point4, sf_plot4, nplot4 and nplot4_total for creating a 4 x 4 km grid. Create the grid points Create directly: Points with the option what = \"center\", this time the cellsize argument will be 4000 m. ## Console sf_points4 &lt;- st_make_grid(sf_lc, cellsize = c(___, ___), what = &quot;centers&quot;, offset = offset) %&gt;% st_intersection(sf_admin) %&gt;% st_as_sf() ## Solution sf_points4 &lt;- st_make_grid(sf_lc, cellsize = c(4000, 4000), what = &quot;centers&quot;, offset = offset) %&gt;% st_intersection(sf_admin) %&gt;% st_as_sf() Plots by joining the land cover shapefile sf_lc. ## Console sf_plot4 &lt;- sf_points4 %&gt;% st_join(___) %&gt;% mutate(lc = fct_reorder(lc, lc_id)) %&gt;% filter(!is.na(lc)) ## Solution sf_plot4 &lt;- sf_points4 %&gt;% st_join(sf_lc) %&gt;% mutate(lc = fct_reorder(lc, lc_id)) %&gt;% filter(!is.na(lc))   Visualize Create a map with the plots over the land cover (remember we have a custom color palette pal for Louland land covers). ## Console ggplot() + geom_sf(data = ___, aes(fill = lc), color = NA) + geom_sf(data = ___, aes(fill = lc), shape = 21) + scale_fill_manual(values = ___) + labs(fill = &quot;&quot;, color = &quot;&quot;) + theme_void() ## Solution ggplot() + geom_sf(data = sf_lc, aes(fill = lc), color = NA) + geom_sf(data = sf_plot4, aes(fill = lc), shape = 21) + geom_sf(data = sf_admin, fill = NA) + scale_fill_manual(values = pal) + labs(fill = &quot;&quot;, color = &quot;&quot;) + theme_void()   Calculate the number of plot per land cover class Start with the number of plots per land cover class using group_by() and summarise(). ## Console nplot4 &lt;- ___ %&gt;% as_tibble() %&gt;% ___(lc) %&gt;% ___(n = n()) nplot4 ## Solution nplot4 &lt;- sf_plot4 %&gt;% as_tibble() %&gt;% group_by(lc) %&gt;% summarise(n = n()) nplot4 # A tibble: 7 x 2 lc n &lt;fct&gt; &lt;int&gt; 1 WA 2 2 NF 108 3 WL 89 4 DD 44 5 MD 116 6 EV 58 7 MG 6 Then calculate the total number of plots in forest land. ## Console nplot4_total &lt;- ___ %&gt;% filter(!(lc %in% c(&quot;WA&quot;, &quot;NF&quot;))) %&gt;% summarise(___) nplot4_total ## Solution nplot4_total &lt;- nplot4 %&gt;% filter(!(lc %in% c(&quot;WA&quot;, &quot;NF&quot;))) %&gt;% summarise(n = sum(n)) nplot4_total # A tibble: 1 x 1 n &lt;int&gt; 1 313   Good job! The 4 km grid looks like exactly what we need. Lets still design a 3 x 3 km grid to see how many forest plots it would generate and practice the R code. In the next session the exercises wont be guided anymore, instead you will have a group of empty consoles to create, test and submit code.   "],["4-sys3.html", "4 Systematic sampling: 3 x 3 km grid Create the grid points Visualize Calculate the number of plot per land cover class", " 4 Systematic sampling: 3 x 3 km grid DRAFT You should start to be familiar with the process and the R commands to generate grid points. In this section you are going to repeat the code and steps for generating grid points, this time with a 3 x 3 km grid. Your turn! Create sf_point3, sf_plot3, nplot3 and nplot3_total for creating a 3 x 3 km grid.   Create the grid points Create directly: Points with the option what = \"center\". ## Console ## ## Solution sf_points3 &lt;- st_make_grid(sf_lc, cellsize = c(3000, 3000), what = &quot;centers&quot;, offset = offset) %&gt;% st_intersection(sf_admin) %&gt;% st_as_sf() Plots by joining the land cover shapefile sf_lc. ## Console ## ## Solution sf_plot3 &lt;- sf_points3 %&gt;% st_join(sf_lc) %&gt;% mutate(lc = fct_reorder(lc, lc_id)) %&gt;% filter(!is.na(lc))   Visualize Make a map with the plots over the land cover and use our color palette pal for Louland land covers). ## Console ## ## Solution ggplot() + geom_sf(data = sf_lc, aes(fill = lc), color = NA) + geom_sf(data = sf_plot3, aes(fill = lc), shape = 21) + geom_sf(data = sf_admin, fill = NA) + scale_fill_manual(values = pal) + labs(fill = &quot;&quot;, color = &quot;&quot;) + theme_void()   Calculate the number of plot per land cover class Start with the number of plots per land cover class using group_by() and summarise(). ## Console ## ## Solution nplot3 &lt;- sf_plot3 %&gt;% as_tibble() %&gt;% group_by(lc) %&gt;% summarise(n = n()) nplot3 # A tibble: 7 x 2 lc n &lt;fct&gt; &lt;int&gt; 1 WA 6 2 NF 172 3 WL 159 4 DD 82 5 MD 204 6 EV 103 7 MG 10 Then calculate the total number of plots in forest land. ## Console ## Solution nplot3_total &lt;- nplot3 %&gt;% filter(!(lc %in% c(&quot;WA&quot;, &quot;NF&quot;))) %&gt;% summarise(n = sum(n)) nplot3_total # A tibble: 1 x 1 n &lt;int&gt; 1 558   Our desired sampling size is 239 to give us an expected precision of 10% and it fits our budget. What sampling grid correspond best to our target sampling size? 5 x 5 km 4 x 4 km 3 x 3 km Good job! The 4 x 4 km grid fits well our precision objective of 10%, based on a cost/precision trade-off and we will use it as reference for two other sampling methods under what we called simple sampling.   "],["5-sysrecap.html", "5 Systematic sampling: Recap", " 5 Systematic sampling: Recap DRAFT Based on the preliminary inventory and few R skills, we have now identified a good sampling grid. To recap the process was: We used the preliminary forest inventory results to calculate a an hypothetical number of samples required for a desired precision of 5, 10, 15 or 20%. Based on our available budget we have identified what precision we can afford annd how many plots does it requires, i.e. our sampling size. We have then created different sampling grids for Louland and estimated how many plots would fall on forest land. We have selected the most adequate sampling grid based on our cost/precision trade-off. Now lets see how the same amount of sampling points would be distributed with a random sampling or with an uneven systematic sampling.   "],["6-ran.html", "6 Random Sampling Demo Practice", " 6 Random Sampling DRAFT Complete random sampling designs have a number of disadvantages and are generally not recommended at a national scale. We will still relocate our 558 plots randomly to compare different sampling designs. Demo The equivalent of st_make_grid() for random sampling is st_sample(). Every time st_sample() is used a new set of random locations are created. To get the same random allocation every time we run the code we need to set a seed and the function set.seed(). In the example we will use set.seed(10) but feel free to change or remove at will the chose seed number in the practice below.   As the plot locations are completely random, we have no control over how many plots are going to land on forest versus non-forest land. We can apply two possible strategies to reach our target number of plots inside forest land: Filter out non-forest polygons and make the sample size equal to the total number of plots in forest land from our 4 x 4 km sampling grid nplot4_total$n. Make the sampling size equal to the original number of points in a 4 x 4 km grid nrow(sf_points4) and accept that the result may be different from the systematic sampling. We can anticipate that the second solution is better if you are also interested in non-forest land, although there is no guarantee you will have enough plots in each land cover. We will favor option 1 as our primary target is forest carbon stock. As sf objects behave similarly to tibbles, the tidyverse function filter() will allow us to prepare a forest only shapefile. sf_forest &lt;- sf_lc %&gt;% filter(lc %in% c(&quot;EV&quot;, &quot;MD&quot;, &quot;DD&quot;, &quot;WL&quot;, &quot;MG&quot;))   We can now create the random points based on the sf_forest canvas. set.seed(10) sf_points_rd &lt;- st_sample(x = sf_forest, size = nplot4_total$n) %&gt;% st_as_sf()   We can then extract the land cover at the plots location sf_plot_rd &lt;- sf_points_rd %&gt;% st_join(sf_lc) %&gt;% mutate(lc = fct_reorder(lc, lc_id)) %&gt;% filter(!is.na(lc))  And map them. ggplot() + geom_sf(data = sf_lc, aes(fill = lc), color = NA) + geom_sf(data = sf_plot_rd, aes(fill = lc), shape = 21) + geom_sf(data = sf_admin, fill = NA) + scale_fill_manual(values = pal) + labs(fill = &quot;&quot;, color = &quot;&quot;) + theme_void()   If at a first glance the plot distribution shows a decent coverage of the new land, it is interesting to calculate the number of plots per land cover category to confirm this impression. nplot_rd &lt;- sf_plot_rd %&gt;% as_tibble() %&gt;% group_by(lc) %&gt;% summarise(n = n()) nplot_rd # A tibble: 5 x 2 lc n &lt;fct&gt; &lt;int&gt; 1 WL 93 2 DD 51 3 MD 108 4 EV 54 5 MG 7   Practice Your turn! In the console below, test different seed numbers and visualize the results. Create the points, choose whatever seed number you want: ## Console set.seed(___) sf_points_rd2 &lt;- st_sample(x = ___, size = ___) %&gt;% st_as_sf() ## Solution set.seed(100) sf_points_rd2 &lt;- st_sample(x = sf_lc, size = nplot3_total$n) %&gt;% st_as_sf() Add the land cover information: ## Console sf_plot_rd2 &lt;- sf_points_rd2 %&gt;% st_join(___) %&gt;% mutate(lc = fct_reorder(lc, ___)) %&gt;% filter(___) ## Solution sf_plot_rd2 &lt;- sf_points_rd2 %&gt;% st_join(sf_lc) %&gt;% mutate(lc = fct_reorder(lc, lc_id)) %&gt;% filter(!is.na(lc))   Show the plot locations on a map: ## Console ggplot() + geom_sf(data = sf_lc, aes(fill = lc), color = NA) + geom_sf(data = ___, aes(fill = ___), shape = 21) + geom_sf(data = sf_admin, fill = NA) + scale_fill_manual(values = pal) + labs(___, ___) + theme_void() ## Solution ggplot() + geom_sf(data = sf_lc, aes(fill = lc), color = NA) + geom_sf(data = sf_plot_rd2, aes(fill = lc), shape = 21) + geom_sf(data = sf_admin, fill = NA) + scale_fill_manual(values = pal) + labs(fill = &quot;&quot;, color = &quot;&quot;) + theme_void() Calculate the number of plots per land cover type: ## Console nplot_rd2 &lt;- ___ %&gt;% as_tibble() %&gt;% group_by(___) %&gt;% summarise(n = n()) nplot_rd2 ## Solution nplot_rd2 &lt;- sf_plot_rd2 %&gt;% as_tibble() %&gt;% group_by(lc) %&gt;% summarise(n = n()) nplot_rd2 # A tibble: 6 x 2 lc n &lt;fct&gt; &lt;int&gt; 1 NF 136 2 WL 125 3 DD 57 4 MD 151 5 EV 80 6 MG 9   Well done! We will keep these results for later and move on with uneven systematic sampling.   "],["7-uneven.html", "7 Uneven Systematic Sampling Demo Create uneven systemic sampling for the 4 x 4 km grid Proportion of plots per forest land cover", " 7 Uneven Systematic Sampling In the NFI eLearning Module 3: Sampling, we have seen that systematic sampling are popular for their increased precision and low auto-correlation compared to simple random sampling. We have also seen that their main caveat is that a systematic sampling is based on only one randomization. One way to avoid this limitation is to create an uneven systematic sampling. An uneven systematic sample starts with the same grid as a systematic sampling, but instead of placing plots at the center or corner of the grid, we allocate them randomly inside each square of the grid.   Demo We will demonstrate the R commands for the 5 x 5 km grid and let you practice with the 4 x 4 km grid that we have selected for Loulands NFI. For making random points within a grid, we will use the function st_sample(), but this time we will apply it to the grid polygons and the size of the sample is 1 but repeated for each points in the grid. set.seed(10) sf_points_uneven &lt;- st_sample(x = sf_grid5, size = rep(1, nrow(sf_points5))) Same as before, we can overlay the results with the land cover shapefile to see how many plots would fall on forests. sf_plot_uneven &lt;- sf_points_uneven %&gt;% st_as_sf() %&gt;% st_join(sf_lc) %&gt;% mutate(lc = fct_reorder(lc, lc_id)) %&gt;% filter(!is.na(lc)) Then a quick map is always a good idea to see if everything looks at it should. In this case, we should not see more than one pot in each grid square. ggplot() + geom_sf(data = sf_lc, aes(fill = lc), color = NA) + geom_sf(data = sf_grid5, fill = NA, col = &quot;red&quot;) + geom_sf(data = sf_plot_uneven, aes(fill = lc), shape = 21) + geom_sf(data = sf_admin, fill = NA) + scale_fill_manual(values = pal) + labs(fill = &quot;&quot;, color = &quot;&quot;) + theme_void() Create uneven systemic sampling for the 4 x 4 km grid Your turn! Create an uneven systematic sample based on the 4 x 4 km grid. First you need to create the 4 x 4 km grid. Have a look at the section 2 for code block if you dont remember the function inputs, and adapt it to the 4 x 4 km grid. # Console sf_grid4 &lt;- st_make_grid(sf_lc, cellsize = c(___, ___), what = ___, offset = offset) %&gt;% st_intersection(sf_admin) ## Solution sf_grid4 &lt;- st_make_grid(sf_lc, cellsize = c(4000, 4000), what = &quot;polygons&quot;, offset = offset) %&gt;% st_intersection(sf_admin) Create the points. We have just created the grids canvas sf_grid4 and we have already created the grid points sf_points4 in the section 3. Keep the seed 10 to have comparable results with all the users of this lesson. NB: This operation is calculation intensive and may take a few minutes to complete. ## Console set.seed(10) sf_points4_uneven &lt;- st_sample(x = ___, size = ___) %&gt;% st_as_sf() ## Solution set.seed(10) sf_points4_uneven &lt;- st_sample(x = sf_grid4, size = rep(1, nrow(sf_points4))) %&gt;% st_as_sf() Add the land cover information with st_join(). ## Console sf_plot4_uneven &lt;- ___ %&gt;% ___(___) %&gt;% ___(lc = fct_reorder(lc, ___)) %&gt;% ___(___) ## Solution sf_plot4_uneven &lt;- sf_points4_uneven %&gt;% st_join(sf_lc) %&gt;% mutate(lc = fct_reorder(lc, lc_id)) %&gt;% filter(!is.na(lc))   Show the plot locations on a map with a ggplot(). ## Console ## ## Tip ggplot() + geom_sf(data = sf_lc, aes(fill = lc), color = NA) + geom_sf(data = ___, fill = NA, col = &quot;red&quot;) + geom_sf(data = ___, aes(fill = lc), shape = 21) + geom_sf(data = ___, fill = NA) + scale_fill_manual(values = ___) + ___(fill = &quot;&quot;, color = &quot;&quot;) + theme_void() ## Solution ggplot() + geom_sf(data = sf_lc, aes(fill = lc), color = NA) + geom_sf(data = sf_grid4, fill = NA, col = &quot;red&quot;) + geom_sf(data = sf_plot4_uneven, aes(fill = lc), shape = 21) + geom_sf(data = sf_admin, fill = NA) + scale_fill_manual(values = pal) + labs(fill = &quot;&quot;, color = &quot;&quot;) + theme_void()   And finally calculate the number of plots per land cover type. ## Console ## ## Tip nplot4_uneven &lt;- ___ %&gt;% as_tibble() %&gt;% group_by(___) %&gt;% summarise(n = n()) nplot4_uneven ## Solution nplot4_uneven &lt;- sf_plot4_uneven %&gt;% as_tibble() %&gt;% group_by(lc) %&gt;% summarise(n = n()) nplot4_uneven # A tibble: 7 x 2 lc n &lt;fct&gt; &lt;int&gt; 1 WA 2 2 NF 107 3 WL 108 4 DD 43 5 MD 124 6 EV 51 7 MG 18   Well done! We have one of the best possible simple sampling design, combining strengths of both systematic and random sampling.   Proportion of plots per forest land cover Lets compare how many plots fell in each land cover class of Louland for our three simple sampling methods (Table 7.1). We can see that our three simple sampling methods gave similar plot allocation per land cover. There is plus or minus 3 points between their proportion and the area proportion of the land cover classes. Table 7.1: Area and percentage of plots in each forest land cover. Area (kha) Systematic sampling Random sampling Uneven systematic sampling Land cover Area perc. # plots perc. # plots perc. # plots perc. WL 152.70 30 89 28 93 30 108 31 DD 63.98 13 44 14 51 16 43 12 MD 186.39 37 116 37 108 35 124 36 EV 88.91 18 58 19 54 17 51 15 MG 10.36 2 6 2 7 2 18 5 Total 502.34 100 313 100 313 100 344 100 Lets refer back to the NFI eLearning Module 3: Sampling. The differences between these sampling methods doesnt translate to major differences in plot allocation per land cover classes, but rather to statistical considerations. Which of the following assertions are true? Simple random sampling (SRS) is not suitable because you have no control over plot distribution. SRS is less suitable that systematic sampling methods as SRS plots have a higher chance of autocorrelation. Systematic sampling consist of one sample, it only borrows SRS stats because they are considered conservative. Uneven systematic sampling allows to use SRS statistical formulas and plot distribution has less autocorrelation than SRS. "],["8-plot-designs.html", "8 Plot designs", " 8 Plot designs National Forest inventories of different countries come with various cluster, plot and nested subplots observation designs. When using nested plot design, one objective is to measure approximately an equal number of all sizes of trees, for example by basal area or tree volume classes, and avoid measuring too many small trees. Each plot should also capture enough trees. With additional preliminary information such as permanent sampling plots or other forest inventories with large plots, we can optimize the observation design for various forest conditions. In this lesson, we will not dive into observation design optimization, the plot design is limited to one choice: circular plot of 20 m radius for all trees with a diameter at breast height bigger than or equal to 20 cm, nested circular plot of 5 m radius for trees with a diameter at breast height bigger than or equal to 10 cm and smaller than 20 cm. Lets see for example all the trees measured in one plot: \"md-zzb5\" (Figure 8.1). Figure 8.1: Observation design for this lesson with plot md-zzb5 as example.   "],["conclusion.html", "Conclusion", " Conclusion DRAFT This is the end of the lesson 2, part 1. In this lesson we have tested different sampling designs based on the sampling size calculated for simple random sampling and applicable to systematic and uneven systematic sampling. We have seen that considerations for choosing our method among these simple sampling designs were not related to differences in plot distribution per land cover class but rather to statistics concepts such as autocorrelation and how systematic grids are in facts samples of size one. In the part 2 of this lesson 2, we will get the tree and plot data from the NFI crews for our uneven systematic sampling design and start the data analysis. A plot distribution proportional to land cover class relative areas is not always desirable. The main goal of sampling optimization is to get the best precision possible with the lowest number of plots to measure. From the sampling size formula for Simple Random Sampling (see section 1), it is easy to understand that the the number of plots to measure increases with the variability of our main variable of interest (represented by its coefficient of variation \\(CV\\)). If, for example, a population with a rather high \\(CV\\) could be divided into two sub-populations with each a very low \\(CV\\), we can intuitively understand that a small number of plot in each sub-population, and therefore a smaller overall number of plots, could give us a good precision. Similarly, if one of the sub-population has a higher \\(CV\\) than the other, and even if its relative area is smaller comparatively smaller, allocating a higher number of plots to this sub-population will increase the overall precision. Our simple sampling methods gave sample allocation to land cover classes more or less proportional to their relative areas. It means a very small number of plots in Mangrove forest and a high number of plots in Mixed-Deciduous forest. However, the aboveground biomass \\(CV\\) in Mangrove forests may very well be much higher than in Mixed-Deciduous forests. In this case, a sampling strategy that would give more plots to Mangrove and less to Mixed-Deciduous forests would increase the overall precision of our aboveground biomass and be more cost-efficient. These strategies are called Stratified Sampling and will be the main topic of another interactive lesson. For now, we will continue with our uneven systematic sampling design, based on 4 x 4 km grid. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
