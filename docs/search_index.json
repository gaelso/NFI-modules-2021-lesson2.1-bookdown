[["index.html", "NFI eLearning Practice Simulation Cover page", " NFI eLearning Practice Simulation Lesson 2: Simple sampling for carbon Part 1: Sampling design Handbook with solutions - Version 0.3 - October 2021 Cover page DRAFT         NFI eLearning Practice Simulation Lesson 2: Simple sampling for carbon Part 1: Sampling design   ADD Authors FAO, Göttingen   ADD Recommended citation Authors, Interactive training modules on National Forest Inventory data analysis - handbook with solutions, Food and Agricultural Organization of the United Nations, Rome.   ADD Disclaimer   ADD license Recommendation: CC NC SA 4 for the book, MIT for the code, Underlying data © FAO, 2021.   ADD Photo credit "],["introduction.html", "Introduction", " Introduction DRAFT Welcome to the second lesson of the National Forest Inventory eLearning practice simulation module. This interactive module is designed to complement the National Forest Inventory eLearning Modules with practical hands-on exercises on a fictional island that just emerged in the middle of the Atlantic Ocean: Louland. The lesson 2 focuses on several sampling methods that we called simple sampling as they are based on the simple random sampling statistics. As we have seen in the NFI eLearning Modules, NFIs, more so nowadays, are multi-purpose in nature but the sampling design requires that we focus on one main variable of interest. In this lesson 2, the main variable of interest is the forest mean aboveground biomass of Louland. Here, we will limit ourselves to random and systematic sampling, and we will obtain aboveground biomass estimates for each forest type through post-stratification. If you have not completed lesson 1: Overview of the preliminary data, we encourage you to start there. Lesson 1 provides a small overview of Louland and introduces how you will interact with R consoles embedded in this document. Lesson 2 is divided in two parts: Sampling design Data analysis We will now start part 1. We will develop a sampling design for estimating the mean carbon stock of Loulands forests in ton/ha. The objectives of part 1 are: Estimate sample size based on a precision/cost trade-off (cost being simplified to the number of plots that we can afford for now), Find a sampling grid size for a systematic sampling closest to the estimated number of samples. Create a simple random sampling with the same number of plots. Compare the distribution of plots per forest category for these two types of simple sampling designs. Please note that nowadays many countries do not use these sampling design methods due to several inconveniences. These designs are often not optimal as different sub-populations have different variability and taking it into consideration allows for more optimal designs (See module 3 on Sampling for more information). However, since the maths for the estimations resulting from these sampling methods are fairly simple, they constitute a good entry point to sampling and we will start from there. More advanced sampling design methods for NFI, i.e stratified and ratio estimators are the focus of other interactive lessons. In this lesson we will use the collection of packages grouped inside the package tidyverse for general data analysis and the package sf for spatial data analysis. We will also briefly use the package units to avoid confusion around area units. library(tidyverse) library(sf) library(units) Note that in the background we also use extrafont to add Google Fonts to our figures and ggspatial to add the North arrow and scale to our maps. Lets get started! "],["1-size.html", "1 Sampling size", " 1 Sampling size DRAFT Remember in the NFI module 3, the formula to estimate the sampling size n, based on Simple Random Sample (SRS), is: \\[n = \\left(\\frac{CV \\cdot t^{1 - \\alpha/2}_{n-1}}{A}\\right)^2 \\sim \\left(\\frac{CV \\cdot 1.96}{A}\\right)^2\\] with: \\(CV = s / \\overline{y} \\times 100\\) the NFI main variable coefficient of variation expressed as percentage, \\(s\\) and \\(\\overline{y}\\) the samples main variables standard deviation and average respectively, \\(A\\) the desired precision in percentage, and \\(t^{1 - \\alpha/2}_{n-1}\\) the Students t-value with \\(n-1\\) degrees of freedom and \\(1-\\frac{\\alpha}{2}\\) confidence level where \\(\\alpha\\) is the significance level. This value is approximated by the value 1.96 when assuming an infinite sample and 0.95 confidence level (two tails \\(\\alpha\\) = 0.05).   Thanks to the results of the preliminary forest inventory (exfi_agb), we have an estimate of \\(\\overline{y}\\) and \\(s\\) for a forest stand in Louland. While this stand is most likely not representative of the whole island, we can use it to make an estimate of the number of samples necessary to achieve various target precision values. The final number of plots will depend on the desired precision and your budget constraints. In case of systematic sampling we can add an additional constraint: we want the NFI grid size in km to be an integer number (i.e. 1, 2, 3. etc.). We had a look at the table exfi_agb in Lesson 1, lets show it again to remind ourselves the inventorys mean aboveground biomass mean_agb and its standard deviation sd_agb. Run the table name in the console below. ## Console ## ## Solution exfi_agb # A tibble: 1 x 8 n_plot n_tree mean_ba sd_ba mean_agb sd_agb ci ci_perc &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 10 525 23.8 19.5 202. 181. 112. 55 The table contains aggregated information on the number of trees measured, the average basal area (BA) in m2/ha and aboveground biomass (AGB) in ton/ha. The aboveground biomass is associated with its confidence interval in ton/ha and in percentage. What is the average aboveground biomass in ton/ha in the preliminary forest inventory? Multiple choices 202 525 112 181 Back to calculating a sampling size, lets first calculate the number of samples for different precision levels. For a 5% precision, the number of samples is: n05 &lt;- round(((exfi_agb$sd_agb / exfi_agb$mean_agb * 100) * 1.96 / 5)^2) n05 [1] 1224   Your turn, calculate n10, n15 and n20, the number of samples necessary to get respectively 10%, 15% and 20% precision on Loulands mean aboveground biomass. Calculations for 10% here: ## Console n10 &lt;- round(((exfi_agb$sd_agb / exfi_agb$mean_agb) * ___ / ___)^2) n10 ## Solution n10 &lt;- round(((exfi_agb$sd_agb / exfi_agb$mean_agb * 100) * 1.96 / 10)^2) n10 [1] 306   Calculations for 15% here: ## Console n15 &lt;- round(((___ / ___) * ___ / ___)^2) n15 ## Solution n15 &lt;- round(((exfi_agb$sd_agb / exfi_agb$mean_agb * 100) * 1.96 / 15)^2) n15 [1] 136   Calculations for 20% here: ## Console ## ## Solution n20 &lt;- round(((exfi_agb$sd_agb / exfi_agb$mean_agb * 100) * 1.96 / 20)^2) n20 [1] 77   Well done! We have enough budget for around 300 plots. What precision can we afford? Multiple choices 5% 10% 15% 20%   "],["2-sys.html", "2 Systematic sampling Grid spacing Create grid points Visualize Calculate the number of plots per land cover class Systematic sampling: Recap", " 2 Systematic sampling DRAFT Now lets see what sampling grid spacing is the closest to a sampling size of 306 plots, the number of selected plots selected with our budget constraint. We will start with systematic sampling to account for the additional constraint on grid spacing, and afterwards we will make a simple random sampling that matches the same number of plots.   Grid spacing To calculate the grid spacing corresponding to our sampling size, first we divide forest area by sampling size to have the an estimate of the area that each sample point represent. For a square grid, the square root of this division gives the grid spacing. For example, for a 1,000 ha forest and a sampling size of 20 plots, the grid size will be: \\[d = \\sqrt{\\frac{1000 ha}{20}} = \\sqrt{50ha} = \\sqrt{500000m^2} \\approx 707.1m\\] In our case, we can calculate the forest area of Louland from the table area_lc calculated in Lesson 1. We need to (1) filter forested land cover classes with filter(), (2) extract their area with pull() and (3) sum their area. Your turn! Use the console below to create the object area_forest that contain the total forest area. Remember that our land cover classes are coded EV, MD, DD, MG, WL, NF and WA for Evergreen, Mixed Deciduous, Deciduous and Mangrove Forests, Woodland, Non-Forest and Water respectively. ## Console ## ## Tips ## First run `area_lc` in the console to see what land cover classes are represented and which codes need to be filtered ## Tips area_forest &lt;- area_lc %&gt;% filter(lc %in% c(___)) %&gt;% pull(___) %&gt;% sum() area_forest ## Solution area_forest &lt;- area_lc %&gt;% filter(lc %in% c(&quot;EV&quot;, &quot;MD&quot;, &quot;DD&quot;, &quot;MG&quot;, &quot;WL&quot;)) %&gt;% pull(area_ha) %&gt;% sum() area_forest 502340.1 [ha]   Then we need to convert the forest area from hectares to square km: area_forest_km2 &lt;- as.numeric(set_units(area_forest, value = km2)) area_forest_km2 [1] 5023.401 Finally, we can apply the grid spacing formula with the square root function sqrt() and the sampling size for a 10% precision n10. Complete the following code sequence to calculate the grid spacing. ## Console grid_spacing &lt;- round(sqrt(___ / ___), 3) grid_spacing ## Solution grid_spacing &lt;- round(sqrt(area_forest_km2 / n10), 3) grid_spacing [1] 4.052 The result is a grid spacing slightly larger than 4 km. We need to note here that the number of plot falling on forest land might differ from this hypothetical value, depending on the forest distribution. We need to create the grid and calculate how many plots are located on forest land to cross check that the grid spacing fits our desired cost/precision sampling size. Even after this confirmation, there can be mapping errors and several plots confirmed to be located on forest land may not be forested.   To help you become familiar with the R code, we will demonstrate the sequence of commands to create the grid, map it and calculate the number of plots per land cover class on a 5 x 5 km grid for the sake of demonstration and we will let you develop the 4 x 4 km grid through guided exercises.   Create grid points The sf package contains the function st_make_grid() to create grids, and aligned or unaligned grid points within grid polygons. We have the sf_admin shapefile that contains the administrative boundary of Louland and can be used as a canvas for the grid. We have two sf objects in the preliminary data: sf_admin, the administrative boundaries of Louland and sf_lc the land cover shapefile data of Louland. In the console below you can run the object names to see their basic information. ## Console ##   We will also offset the grid starting point 1 km southwards and 1 km westwards of the land most Southern and Western point to avoid having too many plots at the edge of the land. This is a precaution specific for this exercise, as Louland shape is close to a square, and may not be needed in a real country! The offset is calculated based on the land cover shapefile bounding box calculated with st_bbox(). offset &lt;- st_bbox(sf_lc)[c(&quot;xmin&quot;, &quot;ymin&quot;)] + c(-1000, -1000)   How to create grids To create a 5 x 5 km grid we will fill the input cellsize with c(5000, 5000) as the unit is meters, and to make the grid we use the option what = \"polygon\". sf_grid5 &lt;- st_make_grid(sf_lc, cellsize = c(5000, 5000), what = &quot;polygons&quot;, offset = offset) %&gt;% st_intersection(sf_admin) %&gt;% st_as_sf() You turn! Adapt the above code to create sf_grid4, the 4 x 4 km grid. ## Console sf_grid4 &lt;- st_make_grid(sf_lc, cellsize = c(___, ___), what = ___, offset = ___) %&gt;% st_intersection(sf_admin) %&gt;% st_as_sf() ## Solution sf_grid4 &lt;- st_make_grid(sf_lc, cellsize = c(4000, 4000), what = &quot;polygons&quot;, offset = offset) %&gt;% st_intersection(sf_admin) %&gt;% st_as_sf()   How to create aligned sampling points To create the points we change the option to what = \"center\" (replace \"center\" with \"corner\" to locate the points at the grid intersections). At this stage, we can also use st_intersection() to reduce the grid to our country boundaries and the function st_as_sf() converts the result of the intersection to an sf object. sf_points5 &lt;- st_make_grid(sf_lc, cellsize = c(5000, 5000), what = &quot;centers&quot;, offset = offset) %&gt;% st_intersection(sf_admin) %&gt;% st_as_sf() You turn! Prepare sf_point4, the points location on the 4 x 4 k grid. ## Console ## ## Tips sf_points4 &lt;- st_make_grid(sf_lc, cellsize = c(___, ___), what = ___, offset = ___) %&gt;% st_intersection(___) %&gt;% st_as_sf() ## Solution sf_points4 &lt;- st_make_grid(sf_lc, cellsize = c(4000, 4000), what = &quot;centers&quot;, offset = offset) %&gt;% st_intersection(sf_admin) %&gt;% st_as_sf()   We can finally overlap the point grid with the land cover layer with st_join() to assign land cover to each plot. We aim for our land cover code lc to appear in a certain order in the map. To follow the order of the land cover numerical ID lc_id we use the function fct_reorder from the tidyverse package forcats. This function convert a text variable into an ordered factor following an other variable (lc_id in our case). sf_plot5 &lt;- sf_points5 %&gt;% st_join(sf_lc) %&gt;% mutate(lc = fct_reorder(lc, lc_id)) %&gt;% filter(!is.na(lc)) Your turn! Adapt the above code to prepare sf_plot4, joining the points location and the land cover class spatial data. ## Console ## ## Tips sf_plot4 &lt;- ___ %&gt;% st_join(___) %&gt;% mutate(lc = fct_reorder(___, ___)) %&gt;% filter(___) ## Solution sf_plot4 &lt;- sf_points4 %&gt;% st_join(sf_lc) %&gt;% mutate(lc = fct_reorder(lc, lc_id)) %&gt;% filter(!is.na(lc))   Visualize We can visualize the grid with the following code based on the ggplot2 package and its geom_sf() function to display sf objects.   We have a custom color palette pal for Louland land covers. We can see this color palette with the function show_col() from the scales package pal &lt;- c(&quot;#73c2fb&quot;, &quot;#edf5e1&quot;, &quot;#ffcb9a&quot;, &quot;#5cdb95&quot;, &quot;#379683&quot;, &quot;#00743f&quot;, &quot;#012172&quot;) library(scales) show_col(pal)   Here is the code to make the map with the 5 x 5 km systematic sampling design. ggplot() + geom_sf(data = sf_lc, aes(fill = lc), color = NA) + geom_sf(data = sf_plot5, aes(fill = lc), shape = 21) + geom_sf(data = sf_grid5, fill = NA, col = &quot;red&quot;, size = 0.1) + geom_sf(data = sf_admin, fill= NA) + scale_fill_manual(values = pal) + labs(fill = &quot;&quot;, color = &quot;&quot;) + theme_void() Its looking good! Adapt this code to make the same map with the 4 x 4 km grid. ## Console ## ## Tips ggplot() + geom_sf(data = ___, aes(fill = lc), color = NA) + geom_sf(data = ___, aes(fill = lc), shape = 21) + geom_sf(data = ___, fill = NA, col = &quot;red&quot;, size = 0.1) + geom_sf(data = ___, fill= NA) + scale_fill_manual(values = ___) + labs(fill = &quot;&quot;, color = &quot;&quot;) + theme_void() ## Solution ggplot() + geom_sf(data = sf_lc, aes(fill = lc), color = NA) + geom_sf(data = sf_plot4, aes(fill = lc), shape = 21) + geom_sf(data = sf_grid4, fill = NA, col = &quot;red&quot;, size = 0.1) + geom_sf(data = sf_admin, fill= NA) + scale_fill_manual(values = pal) + labs(fill = &quot;&quot;, color = &quot;&quot;) + theme_void()   Calculate the number of plots per land cover class To calculate the number of plots in each land cover class, we need to group the plots by land cover with group_by(), then count them with summarise() (remember lesson 1) and the function n(). n() counts the number of rows in a table or in each category of a category variable. As we dont need the spatial information, we first convert our sf object to a tibble with as_tibble(). nplot5 &lt;- sf_plot5 %&gt;% as_tibble() %&gt;% group_by(lc) %&gt;% summarise(n = n()) nplot5 # A tibble: 7 x 2 lc n &lt;fct&gt; &lt;int&gt; 1 WA 1 2 NF 68 3 WL 53 4 DD 32 5 MD 78 6 EV 32 7 MG 5 Your turn! Calculate the number of plots per land cover class with the 4 x 4 km grid ## Console ## ## Tips nplot4 &lt;- ___ %&gt;% as_tibble() %&gt;% ___(lc) %&gt;% ___(n = n()) nplot4 ## Solution nplot4 &lt;- sf_plot4 %&gt;% as_tibble() %&gt;% group_by(lc) %&gt;% summarise(n = n()) nplot4 # A tibble: 7 x 2 lc n &lt;fct&gt; &lt;int&gt; 1 WA 2 2 NF 108 3 WL 89 4 DD 44 5 MD 116 6 EV 58 7 MG 6   Last step, to get the total number of forest plots we need to filter out non-forest categories with filter() and sum up the remaining number of plots. nplot5_total &lt;- nplot5 %&gt;% filter(!(lc %in% c(&quot;WA&quot;, &quot;NF&quot;))) %&gt;% summarise(n = sum(n)) nplot5_total # A tibble: 1 x 1 n &lt;int&gt; 1 200 Your turn! Calculate the total number of forest plots in the 4 x 4 km grid. ## Console ## ## Tips nplot4_total &lt;- ___ %&gt;% filter(!(lc %in% c(&quot;WA&quot;, &quot;NF&quot;))) %&gt;% summarise(___) nplot4_total ## Solution nplot4_total &lt;- nplot4 %&gt;% filter(!(lc %in% c(&quot;WA&quot;, &quot;NF&quot;))) %&gt;% summarise(n = sum(n)) nplot4_total # A tibble: 1 x 1 n &lt;int&gt; 1 313   Good job! Looking back at the sampling size given by different precision levels, we had 306 plots for 10% precision and 136 plots for 15% precision. Our budget is enough to measure around 300 plots, so we can afford an expected precision of 10%. The 4 x 4 km grid anticipates 313 plots in forest land and its exactly what we need and can afford.   Systematic sampling: Recap Based on the preliminary inventory and few R skills, we have now identified a good sampling grid. To recap the process was: We used the preliminary forest inventory results to calculate an hypothetical number of samples required for a desired precision of 5, 10, 15 or 20%. Based on our available budget we have identified what precision we can afford and how many plots it requires, i.e. our sampling size. We have then created different sampling grids for Louland and estimated how many plots would fall on forest land. We have selected the most adequate sampling grid based on our cost/precision trade-off.   "],["3-sys3.html", "3 Systematic sampling: 3 x 3 km grid", " 3 Systematic sampling: 3 x 3 km grid DRAFT This section is optional. If you wish to practice more the grid creation commands, or if you are curious to know how many forest plots we would have with a 3 x 3 km grid, complete the exercises below, otherwise you can skip directly to the next session. In the following console boxes, create sf_point3, sf_plot3, nplot3 and nplot3_total for creating a 3 x 3 km grid (we skip the grid itself to start directly with the points): Points with the option what = \"center\". ## Console ## ## Solution sf_points3 &lt;- st_make_grid(sf_lc, cellsize = c(3000, 3000), what = &quot;centers&quot;, offset = offset) %&gt;% st_intersection(sf_admin) %&gt;% st_as_sf() Plots by joining the land cover shapefile sf_lc. ## Console ## ## Solution sf_plot3 &lt;- sf_points3 %&gt;% st_join(sf_lc) %&gt;% mutate(lc = fct_reorder(lc, lc_id)) %&gt;% filter(!is.na(lc))   Make a map with the plots over the land cover and use our color palette pal for Louland land covers. ## Console ## ## Solution ggplot() + geom_sf(data = sf_lc, aes(fill = lc), color = NA) + geom_sf(data = sf_plot3, aes(fill = lc), shape = 21) + geom_sf(data = sf_admin, fill = NA) + scale_fill_manual(values = pal) + labs(fill = &quot;&quot;, color = &quot;&quot;) + theme_void()   Calculate the number of plot per land cover class using group_by() and summarise(). ## Console ## ## Solution nplot3 &lt;- sf_plot3 %&gt;% as_tibble() %&gt;% group_by(lc) %&gt;% summarise(n = n()) nplot3 # A tibble: 7 x 2 lc n &lt;fct&gt; &lt;int&gt; 1 WA 6 2 NF 172 3 WL 159 4 DD 82 5 MD 204 6 EV 103 7 MG 10   Finally calculate the total number of plots in forest land. ## Console ## Solution nplot3_total &lt;- nplot3 %&gt;% filter(!(lc %in% c(&quot;WA&quot;, &quot;NF&quot;))) %&gt;% summarise(n = sum(n)) nplot3_total # A tibble: 1 x 1 n &lt;int&gt; 1 558   "],["4-ran.html", "4 Random Sampling Demo Practice Proportion of plots per forest type", " 4 Random Sampling DRAFT Complete simple random sampling (SRS) designs have a number of disadvantages and are generally not recommended at a national scale. We will still relocate our 558 plots randomly to compare different sampling designs. Demo The equivalent of st_make_grid() for random sampling is st_sample(). Every time st_sample() is used a new set of random locations is created. To get the same random allocation every time we run the code, we need to set a seed and the function set.seed(). In the example we will use set.seed(10) but feel free to change or remove at will the chose seed number in the practice below.   As the plot locations are completely random, we have no control over how many plots are going to land on forest versus non-forest land. We can apply two possible strategies to reach our target number of plots inside forest land: Filter out non-forest polygons and make the sample size equal to the total number of plots in forest land from our 4 x 4 km sampling grid nplot4_total$n. Make the sampling size equal to the original number of points in a 4 x 4 km grid nrow(sf_points4) and accept that the final number of plots may be slightly different from the previous systematic sampling. We can anticipate that the second solution is better if you are also interested in non-forest land, although there is no guarantee you will have enough plots in each land cover. We will favor option 1 as our primary target is forest carbon stock. As sf objects behave similarly to tibbles, the tidyverse function filter() will allow us to prepare a forest only shapefile. To do so, we we filter only the forest types from the original land cover sf object. sf_forest &lt;- sf_lc %&gt;% filter(lc %in% c(&quot;EV&quot;, &quot;MD&quot;, &quot;DD&quot;, &quot;WL&quot;, &quot;MG&quot;))   We can now create the random points based on the sf_forest canvas. set.seed(10) sf_points_rd &lt;- st_sample(x = sf_forest, size = nplot4_total$n) %&gt;% st_as_sf()   We can then extract the land cover at the plots location sf_plot_rd &lt;- sf_points_rd %&gt;% st_join(sf_lc) %&gt;% mutate(lc = fct_reorder(lc, lc_id)) %&gt;% filter(!is.na(lc))  And map them. ggplot() + geom_sf(data = sf_lc, aes(fill = lc), color = NA) + geom_sf(data = sf_plot_rd, aes(fill = lc), shape = 21) + geom_sf(data = sf_admin, fill = NA) + scale_fill_manual(values = pal) + labs(fill = &quot;&quot;, color = &quot;&quot;) + theme_void()   If at a first glance the plot distribution shows a decent coverage of the new land, it is interesting to calculate the number of plots per land cover category to confirm this impression. nplot_rd &lt;- sf_plot_rd %&gt;% as_tibble() %&gt;% group_by(lc) %&gt;% summarise(n = n()) nplot_rd # A tibble: 5 x 2 lc n &lt;fct&gt; &lt;int&gt; 1 WL 93 2 DD 51 3 MD 108 4 EV 54 5 MG 7   Practice Your turn! In the console below, test different seed numbers and visualize the results. Create the points, choose whatever seed number you want: ## Console set.seed(___) sf_points_rd2 &lt;- st_sample(x = ___, size = ___) %&gt;% st_as_sf() ## Solution set.seed(100) sf_points_rd2 &lt;- st_sample(x = sf_lc, size = nplot3_total$n) %&gt;% st_as_sf() Add the land cover information: ## Console sf_plot_rd2 &lt;- sf_points_rd2 %&gt;% st_join(___) %&gt;% mutate(lc = fct_reorder(lc, ___)) %&gt;% filter(___) ## Solution sf_plot_rd2 &lt;- sf_points_rd2 %&gt;% st_join(sf_lc) %&gt;% mutate(lc = fct_reorder(lc, lc_id)) %&gt;% filter(!is.na(lc))   Show the plot locations on a map: ## Console ggplot() + geom_sf(data = sf_lc, aes(fill = lc), color = NA) + geom_sf(data = ___, aes(fill = ___), shape = 21) + geom_sf(data = sf_admin, fill = NA) + scale_fill_manual(values = pal) + labs(___, ___) + theme_void() ## Solution ggplot() + geom_sf(data = sf_lc, aes(fill = lc), color = NA) + geom_sf(data = sf_plot_rd2, aes(fill = lc), shape = 21) + geom_sf(data = sf_admin, fill = NA) + scale_fill_manual(values = pal) + labs(fill = &quot;&quot;, color = &quot;&quot;) + theme_void() Calculate the number of plots per land cover type: ## Console nplot_rd2 &lt;- ___ %&gt;% as_tibble() %&gt;% group_by(___) %&gt;% summarise(n = n()) nplot_rd2 ## Solution nplot_rd2 &lt;- sf_plot_rd2 %&gt;% as_tibble() %&gt;% group_by(lc) %&gt;% summarise(n = n()) nplot_rd2 # A tibble: 6 x 2 lc n &lt;fct&gt; &lt;int&gt; 1 NF 136 2 WL 125 3 DD 57 4 MD 151 5 EV 80 6 MG 9   Well done! In the next section, will compare the plot distribution between random and systematic sampling.   Proportion of plots per forest type Lets compare how many plots fell in each land cover class of Louland between systematic and simple random sampling (Table 4.1). We can see that our two simple sampling methods gave similar plot allocation per land cover. There is plus or minus 2 points between their proportion and the area proportion of the land cover classes. Table 4.1: Area and percentage of plots in each forest land cover. Area (kha) Systematic sampling Random sampling Land cover Area perc. # plots perc. # plots perc. WL 152.70 30 89 28 93 30 DD 63.98 13 44 14 51 16 MD 186.39 37 116 37 108 35 EV 88.91 18 58 19 54 17 MG 10.36 2 6 2 7 2 Total 502.34 100 313 100 313 100 Lets refer back to the NFI eLearning Module 3: Sampling. The differences between these sampling methods do not translate to major differences in plot allocation per land cover classes, but rather to statistical considerations. Which of the following assertions are true? Simple random sampling (SRS) is not suitable because you have no control over plot distribution. SRS is less suitable than systematic sampling methods as SRS presents a higher chance of autocorrelation. Systematic sampling consists of one sample, it only borrows SRS stats because they are considered conservative.   "],["conclusion.html", "Conclusion", " Conclusion DRAFT This is the end of Lesson 2, part 1. In this lesson we have tested different sampling designs based on the sampling size calculated for simple random sampling and applicable to systematic sampling. We have seen that considerations for choosing our method among these simple sampling designs were not related to differences in plot distribution per land cover class but rather to statistical concepts such as autocorrelation and how systematic grids are in fact random samples of size one. In part 2 of this lesson 2, we will get the tree and plot data from the NFI crews for our systematic sampling design and start the data analysis. A plot distribution proportional to the relative areas of land cover classes is not always desirable. The main goal of sampling optimization is to get the best precision possible with the lowest number of plots to measure. From the sampling size formula for Simple Random Sampling (see section 1), it is easy to understand that the number of plots to measure increases with the variability of our main variable of interest (represented by its coefficient of variation \\(CV\\)). If, for example, a population with a high \\(CV\\) could be divided into two sub-populations each with a very low \\(CV\\), we can intuitively understand that a small number of plot in each sub-population, and therefore a smaller overall number of plots, could give us a good precision. Similarly, if one of the sub-population has a higher \\(CV\\) than the other, and even if its area were comparatively smaller relative to the other, allocating a higher number of plots to this sub-population would increase the overall precision. Our simple sampling methods provided a sample allocation to land cover classes more or less proportional to their relative areas. This meant a very small number of plots were allocated in Mangrove forest and a high number of plots in Mixed-Deciduous forest. However, the aboveground biomass \\(CV\\) in Mangrove forests may very well be much higher than in Mixed-Deciduous forests. In this case, a sampling strategy that would give more plots to Mangrove and less to Mixed-Deciduous forests would increase the overall precision of our aboveground biomass and be more cost-efficient. These strategies are called Stratified Sampling and will be the main topic of another interactive lesson. For now, we will continue with our systematic sampling design, based on 4 x 4 km grid. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
